{"ast":null,"code":"import React from\"react\";import{useEffect,useState}from\"react\";export const useValidation=(value,validators)=>{// определяем базовые состояния для полей формы\nconst[isEmpty,setEmpty]=useState(true);const[minLengthError,setMinLengthError]=useState(false);const[emailError,setEmailError]=useState(false);const[inputValid,setInputValid]=useState(false);// делаем свитч для вариации типов валидации по длине строки, пустоте и корректности почты через регулярное выражение\nuseEffect(()=>{for(const validation in validators){switch(validation){case'minLength':value.length<validators[validation]?setMinLengthError(true):setMinLengthError(false);break;case'isEmpty':value?setEmpty(false):setEmpty(true);break;case'isEmail':const re=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;re.test(String(value).toLowerCase())?setEmailError(false):setEmailError(true);break;}}},[value]);// определяем активность кнопки отправки формы. Если все проверки валидны - кнопка становится активной \nuseEffect(()=>{if(isEmpty||emailError||minLengthError){setInputValid(false);}else{setInputValid(true);}},[isEmpty,emailError,minLengthError]);// возвращаем все состояния\nreturn{isEmpty,minLengthError,emailError,inputValid};};// описываем состояния инпута\nexport const useInput=(initialValue,validators)=>{const[value,setValue]=useState(initialValue);// состояние значения в инпуте\nconst[isDirty,setDirty]=useState(false);//состояние показывает то, был ли выход из инпута или нет\nconst valid=useValidation(value,validators);// изменения значения в инпуте\nconst onChange=e=>{setValue(e.target.value);};// проверка на пустоту и выход с кривозаполненного или незаполненного инпута\nconst onBlur=()=>{setDirty(true);};// возвращаем все состояния\nreturn{value,onChange,onBlur,isDirty,...valid};};","map":{"version":3,"names":["React","useEffect","useState","useValidation","value","validators","isEmpty","setEmpty","minLengthError","setMinLengthError","emailError","setEmailError","inputValid","setInputValid","validation","length","re","test","String","toLowerCase","useInput","initialValue","setValue","isDirty","setDirty","valid","onChange","e","target","onBlur"],"sources":["/Users/dmitriy_kuznetsov/Desktop/repositories/WTFAdmin/wtf-admin/src/hooks/use-form-validate.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nexport const useValidation = (value, validators) => {\n    // определяем базовые состояния для полей формы\n    const [isEmpty, setEmpty] = useState(true)\n    const [minLengthError, setMinLengthError] = useState(false)\n    const [emailError, setEmailError] = useState(false)\n    const [inputValid, setInputValid] = useState(false)\n\n    // делаем свитч для вариации типов валидации по длине строки, пустоте и корректности почты через регулярное выражение\n    useEffect(() => {\n        for (const validation in validators) {\n            switch(validation){\n                case 'minLength':\n                    value.length < validators[validation] ? setMinLengthError(true) : setMinLengthError(false)\n                    break\n                case 'isEmpty':\n                    value ? setEmpty(false) : setEmpty(true)\n                    break\n                case 'isEmail':\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n                    re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true)\n                    break\n            }\n        }\n    }, [value])\n\n    // определяем активность кнопки отправки формы. Если все проверки валидны - кнопка становится активной \n    useEffect(() => {\n        if(isEmpty || emailError || minLengthError){\n            setInputValid(false)\n        }else{\n            setInputValid(true)\n            \n        }\n    }, [isEmpty, emailError, minLengthError])\n\n    // возвращаем все состояния\n    return{\n        isEmpty,\n        minLengthError,\n        emailError,\n        inputValid,\n    }\n}\n// описываем состояния инпута\nexport const useInput = (initialValue, validators) => {\n    const [value, setValue] = useState(initialValue) // состояние значения в инпуте\n    const [isDirty, setDirty] = useState(false) //состояние показывает то, был ли выход из инпута или нет\n    const valid = useValidation(value, validators)\n\n    // изменения значения в инпуте\n    const onChange = (e) => {\n        setValue(e.target.value)\n    }\n\n    // проверка на пустоту и выход с кривозаполненного или незаполненного инпута\n    const onBlur = () =>{\n        setDirty(true)\n    }\n\n    // возвращаем все состояния\n    return{\n        value,\n        onChange,\n        onBlur,\n        isDirty,\n        ...valid,\n    }\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAACC,KAAK,CAAEC,UAAU,GAAK,CAChD;AACA,KAAM,CAACC,OAAO,CAAEC,QAAQ,CAAC,CAAGL,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACM,cAAc,CAAEC,iBAAiB,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACQ,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAEnD;AACAD,SAAS,CAAC,IAAM,CACZ,IAAK,KAAM,CAAAa,UAAU,GAAI,CAAAT,UAAU,CAAE,CACjC,OAAOS,UAAU,EACb,IAAK,WAAW,CACZV,KAAK,CAACW,MAAM,CAAGV,UAAU,CAACS,UAAU,CAAC,CAAGL,iBAAiB,CAAC,IAAI,CAAC,CAAGA,iBAAiB,CAAC,KAAK,CAAC,CAC1F,MACJ,IAAK,SAAS,CACVL,KAAK,CAAGG,QAAQ,CAAC,KAAK,CAAC,CAAGA,QAAQ,CAAC,IAAI,CAAC,CACxC,MACJ,IAAK,SAAS,CACV,KAAM,CAAAS,EAAE,CAAG,wJAAwJ,CACnKA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACd,KAAK,CAAC,CAACe,WAAW,CAAC,CAAC,CAAC,CAAGR,aAAa,CAAC,KAAK,CAAC,CAAGA,aAAa,CAAC,IAAI,CAAC,CACjF,MACR,CACJ,CACJ,CAAC,CAAE,CAACP,KAAK,CAAC,CAAC,CAEX;AACAH,SAAS,CAAC,IAAM,CACZ,GAAGK,OAAO,EAAII,UAAU,EAAIF,cAAc,CAAC,CACvCK,aAAa,CAAC,KAAK,CAAC,CACxB,CAAC,IAAI,CACDA,aAAa,CAAC,IAAI,CAAC,CAEvB,CACJ,CAAC,CAAE,CAACP,OAAO,CAAEI,UAAU,CAAEF,cAAc,CAAC,CAAC,CAEzC;AACA,MAAM,CACFF,OAAO,CACPE,cAAc,CACdE,UAAU,CACVE,UACJ,CAAC,CACL,CAAC,CACD;AACA,MAAO,MAAM,CAAAQ,QAAQ,CAAGA,CAACC,YAAY,CAAEhB,UAAU,GAAK,CAClD,KAAM,CAACD,KAAK,CAAEkB,QAAQ,CAAC,CAAGpB,QAAQ,CAACmB,YAAY,CAAC,CAAC;AACjD,KAAM,CAACE,OAAO,CAAEC,QAAQ,CAAC,CAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5C,KAAM,CAAAuB,KAAK,CAAGtB,aAAa,CAACC,KAAK,CAAEC,UAAU,CAAC,CAE9C;AACA,KAAM,CAAAqB,QAAQ,CAAIC,CAAC,EAAK,CACpBL,QAAQ,CAACK,CAAC,CAACC,MAAM,CAACxB,KAAK,CAAC,CAC5B,CAAC,CAED;AACA,KAAM,CAAAyB,MAAM,CAAGA,CAAA,GAAK,CAChBL,QAAQ,CAAC,IAAI,CAAC,CAClB,CAAC,CAED;AACA,MAAM,CACFpB,KAAK,CACLsB,QAAQ,CACRG,MAAM,CACNN,OAAO,CACP,GAAGE,KACP,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module"}